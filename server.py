import asyncio
from uuid import uuid4
import os
from flask import Flask, render_template, request, redirect
from give_privillege import csgo_give_privillege
from qiwi_api import create_payment, check_payment
from helpers.env import get_env
from helpers.privillege_cost import privillege_cost
from logger import logger
from helpers.uuid_blacklist import uuid_blacklist, update_uuid_blacklist
import yoomoney_api
from crystalpay_api import create_payment as crystalpay_create_payment, check_payment as crystalpay_check_payment
from helpers.settings import settings


privillege_array_30d = privillege_cost['30days']
privillege_array_permanent = privillege_cost['permanent']
privillege_array_discord = privillege_cost['discord_privillege']

app = Flask(__name__)

def send_tg_alert(text: str):
    if settings['telegram_logs']:
        try:
            from tg.main import telegram_alert
            asyncio.run(telegram_alert(text))
        except:
            logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!')

def autodonate_give_privillege(uuid, amount, steam):
    logger.info(f'–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ - {amount}')
    amount_2 = None
    if type(amount) is float or type(amount) is int:
        amount_2 = amount + 1
        amount_2 = str(amount_2)
        amount_2 = amount_2.split('.')
        amount_2 = amount_2[0]
        amount_2 = f'{amount_2}.00'
    amount = str(amount)
    amount = amount.split('.')
    amount = amount[0]
    amount = f'{amount}.00'
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ | –û–ø–ª–∞—á–µ–Ω–æ')
    if uuid in uuid_blacklist:
        return redirect(f"/autodonate/result?redirect=110100011000011100011110101111001011110010", code = 302)
    else:
        uuid_blacklist.append(uuid)
        update_uuid_blacklist(uuid_blacklist)
        logger.debug(f'{uuid} –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°')
        try:
            if amount in list(privillege_array_30d):
                try:
                    status = csgo_give_privillege(steam, privillege_array_30d[amount], '30d')
                    if status is True:
                        try:
                            send_tg_alert(f'–ù–æ–≤–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –≤—ã–¥–∞–Ω–∞:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π')
                        except:
                            pass
                        if privillege_array_30d[amount] in privillege_array_discord:
                            return redirect(f"/autodonate/result?steam={steam}&days=30&redirect=11000010110010001101101011010010110111000001010", code = 302)
                        return redirect(f"/autodonate/result?steam={steam}&days=30&redirect=1100111110111111011111100100", code = 302)
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=110111011011111110100110001011000011100100", code = 302) # notbad
                except:
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=011001110110100101110110011001010110010101110010011100100110111101110010", code = 302) # giverror
            elif amount in list(privillege_array_permanent):
                try:
                    status = csgo_give_privillege(steam, privillege_array_permanent[amount], '9999d')
                    if status is True:
                        try:
                            send_tg_alert(f'–ù–æ–≤–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –≤—ã–¥–∞–Ω–∞:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π')
                        except:
                            pass
                        if privillege_array_permanent[amount] in privillege_array_discord:
                            return redirect(f"/autodonate/result?steam={steam}&days=9999&redirect=11000010110010001101101011010010110111000001010", code = 302)
                        return redirect(f"/autodonate/result?steam={steam}&days=9999&redirect=1100111110111111011111100100", code = 302)
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=110111011011111110100110001011000011100100", code = 302) # notbad
                except:
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=011001110110100101110110011001010110010101110010011100100110111101110010", code = 302) # giverror
            elif amount_2 is not None and amount_2 in list(privillege_array_30d):
                try:
                    status = csgo_give_privillege(steam, privillege_array_30d[amount_2], '30d')
                    if status is True:
                        try:
                            send_tg_alert(f'–ù–æ–≤–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –≤—ã–¥–∞–Ω–∞:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount_2]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π')
                        except:
                            pass
                        if privillege_array_30d[amount_2] in privillege_array_discord:
                            return redirect(f"/autodonate/result?steam={steam}&days=30&redirect=11000010110010001101101011010010110111000001010", code = 302)
                        return redirect(f"/autodonate/result?steam={steam}&days=30&redirect=1100111110111111011111100100", code = 302)
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount_2]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=110111011011111110100110001011000011100100", code = 302) # notbad
                except:
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_30d[amount_2]}\n‚è≥–°—Ä–æ–∫: 30 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=011001110110100101110110011001010110010101110010011100100110111101110010", code = 302) # giverror
            elif amount_2 is not None and amount_2 in list(privillege_array_permanent):
                try:
                    status = csgo_give_privillege(steam, privillege_array_permanent[amount_2], '9999d')
                    if status is True:
                        try:
                            send_tg_alert(f'–ù–æ–≤–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –≤—ã–¥–∞–Ω–∞:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount_2]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π')
                        except:
                            pass
                        if privillege_array_permanent[amount_2] in privillege_array_discord:
                            return redirect(f"/autodonate/result?steam={steam}&days=9999&redirect=11000010110010001101101011010010110111000001010", code = 302)
                        return redirect(f"/autodonate/result?steam={steam}&days=9999&redirect=1100111110111111011111100100", code = 302)
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount_2]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=110111011011111110100110001011000011100100", code = 302) # notbad
                except:
                    try:
                        send_tg_alert(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\nüë§–ò–≥—Ä–æ–∫: <a href="{steam}">–°—Å—ã–ª–∫–∞</a>\nüíé–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privillege_array_permanent[amount_2]}\n‚è≥–°—Ä–æ–∫: 9999 –î–Ω–µ–π\n–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏')
                    except:
                        pass
                    return redirect(f"/autodonate/result?steam={steam}&redirect=011001110110100101110110011001010110010101110010011100100110111101110010", code = 302) # giverror
            else:
                return redirect(f"/autodonate/result?steam={steam}&redirect=11011101101111111010011001101101111111010111011101100100", code = 302) # notfound
        except Exception as err:
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:')
            logger.error(err)
            return redirect(f"/autodonate/result?steam={steam}&redirect=11011101101111111010011001101101111111010111011101100100", code = 302) # giverror



# QIWI
@app.route('/autodonate/qiwi', methods = ['GET'])
def autodonate_qiwi():
    price = request.args.get('price', default = 500, type = int)
    html_response = render_template('autodonate.html', name = 'QIWI', price = price)
    return html_response

@app.route('/autodonate/qiwi/post', methods = ['POST'])
def autodonate_qiwi_post():
    if request.method == 'POST':
        price = request.args.get('price', default = 500, type = int)
        form_result = request.form
        steam = form_result.getlist('steam')
        result = 0
        pay_url = 0
        comment = 0
        if price > 24:
            result, pay_url, comment = create_payment(uuid4(), price)
            if result is True:
                return redirect(f"/autodonate/qiwi/check?uuid={comment}&steam={steam[0]}&pay_url={pay_url}", code=302)
            else:
                html_response = render_template('request.html', request_color = 'red', request_text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã :(')
                return html_response
        else:
            html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç 25 —Ä—É–±–ª–µ–π!')
            return html_response
    else:
        html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!')
        return html_response

@app.route('/autodonate/qiwi/check', methods = ['GET'])
def autodonate_qiwi_check():
    uuid = request.args.get('uuid')
    steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
    pay_url = request.args.get('pay_url')
    html_response = render_template('autodonate_post_success.html', name = 'QIWI', pay_url = pay_url, comment = uuid, steam = steam)
    return html_response

@app.route('/autodonate/qiwi/check_payment', methods = ['POST'])
def autodonate_qiwi_check_payment():
    if request.method == 'POST':
        uuid = request.args.get('uuid')
        steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
        if uuid is not None and uuid != '':
            try:
                result, status, comment, amount = check_payment(uuid)
            except:
                result = False
            if result is True and comment == uuid:
                if status == 'PAID':
                    return autodonate_give_privillege(uuid, amount, steam)
                else:
                    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ | –ï—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ')
                    return redirect(request.referrer, code = 302)
            else:
                logger.info('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç—ë–∂ —Å —Ç–∞–∫–∏–º UUID')
                return redirect(request.referrer, code = 302)
        else:
            logger.info('–ü–æ–ª–µ UUID –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π')
            return redirect(request.referrer, code = 302)
    else:
        html_response = '<html><body><h2>–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!</h2></body></html>'
        return html_response



# AUTODONATE ALL
@app.route('/autodonate/result', methods = ['GET'])
def autodonate_check_result():
    steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
    days = request.args.get('days', default = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', type = str)
    redirect_result = request.args.get('redirect')
    if str(redirect_result) == '1100111110111111011111100100': # good redirect
        logger.debug(f'–ò–≥—Ä–æ–∫ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª –∏ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç {steam} —Å—Ä–æ–∫–æ–º –Ω–∞ {days}')
        html_response = render_template('request.html', request_color = 'green', request_text = f'–ù–∞ –∞–∫–∫–∞—É–Ω—Ç "{steam}" –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è —Å—Ä–æ–∫–æ–º –Ω–∞ "{days}" –¥–Ω–µ–π')
    elif str(redirect_result) == '11000010110010001101101011010010110111000001010': # admin redirect
        logger.debug(f'–ò–≥—Ä–æ–∫ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª –∏ –ø–æ–ª—É—á–∏–ª –º–æ–¥–µ—Ä/–∞–¥–º–∏–Ω-–ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç {steam} —Å—Ä–æ–∫–æ–º –Ω–∞ {days}')
        html_response = render_template('request.html', request_color = 'green', request_text = f'–ù–∞ –∞–∫–∫–∞—É–Ω—Ç "{steam}" –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –º–æ–¥–µ—Ä/–∞–¥–º–∏–Ω-–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è —Å—Ä–æ–∫–æ–º –Ω–∞ "{days}" –¥–Ω–µ–π. –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä –∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –≤—ã –∫—É–ø–∏–ª–∏ –º–æ–¥–µ—Ä/–∞–¥–º–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ')
    elif str(redirect_result) == '110111011011111110100110001011000011100100': # not bad redirect
        logger.debug(f'–ò–≥—Ä–æ–∫ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç {steam} —Ç.–∫. —É–∂–µ –∏–º–µ–µ—Ç –∫–∞–∫—É—é-—Ç–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é')
        html_response = render_template('request.html', request_color = 'orange', request_text = f'–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ "{steam}", —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ –í–ö –∏–ª–∏ –≤ –î–∏—Å–∫–æ—Ä–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏')
    elif str(redirect_result) == '110100011000011100011110101111001011110010': # hacker redirect
        logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ —Å {steam} | –≠—Ç–æ—Ç UUID —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º')
        html_response = render_template('request.html', request_color = 'red', request_text = '–≠—Ç–æ—Ç UUID —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º')
    elif str(redirect_result) == '11011101101111111010011001101101111111010111011101100100': # notfound redirect
        logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ —Å {steam} | –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é')
        html_response = render_template('request.html', request_color = 'red', request_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç–ø–∏—à–∏—Ç–µ –≤ –¥—Å/—Ç–≥/–≤–∫ (https://fame-community.ru/contact)')
    elif str(redirect_result) == '011001110110100101110110011001010110010101110010011100100110111101110010': # giveerror redirect
        logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ —Å {steam} | –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
        html_response = render_template('request.html', request_color = 'red', request_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç–ø–∏—à–∏—Ç–µ –≤ –¥—Å/—Ç–≥/–≤–∫ (https://fame-community.ru/contact)')
    else:
        logger.debug(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç "{steam}" –Ω–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
        html_response = render_template('request.html', request_color = 'red', request_text = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç "{steam}" –Ω–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è')
    return html_response



# YOOMONEY
@app.route('/autodonate/yoomoney', methods = ['GET'])
def autodonate_yoomoney():
    price = request.args.get('price', default = 500, type = int)
    html_response = render_template('autodonate.html', name = 'YooMoney', price = price)
    return html_response

@app.route('/autodonate/yoomoney/post', methods = ['POST'])
def autodonate_yoomoney_post():
    if request.method == 'POST':
        price = request.args.get('price', default = 500, type = int)
        form_result = request.form
        steam = form_result.getlist('steam')
        result = 0
        pay_url = 0
        comment = uuid4()
        payment_type = 'PC'
        if price > 25:
            result, pay_url = yoomoney_api.create_payment(payment_type, f'{comment}', price)
            if result is True:
                logger.info('redirecting...')
                return redirect(f"/autodonate/yoomoney/check?uuid={comment}&steam={steam[0]}&pay_url={pay_url}", code=302)
            else:
                logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã :(')
                html_response = render_template('request.html', request_color = 'red', request_text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã :(')
                return html_response
        else:
            logger.warning('–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç 25 —Ä—É–±–ª–µ–π!')
            html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç 25 —Ä—É–±–ª–µ–π!')
            return html_response
    else:
        logger.warning('get –∑–∞–ø—Ä–æ—Å –∑–∞–º–µ—Å—Ç–æ post')
        html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!')
        return html_response

@app.route('/autodonate/yoomoney/check', methods = ['GET'])
def autodonate_yoomoney_check():
    uuid = request.args.get('uuid')
    steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
    pay_url = request.args.get('pay_url')
    html_response = render_template('autodonate_post_success.html', name = 'YooMoney', pay_url = pay_url, comment = uuid, steam = steam)
    logger.info('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –æ–ø–ª–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
    return html_response

@app.route('/autodonate/yoomoney/check_payment', methods = ['POST'])
def autodonate_yoomoney_check_payment():
    if request.method == 'POST':
        uuid = request.args.get('uuid')
        steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
        if uuid is not None and uuid != '':
            try:
                result, status, comment, amount = yoomoney_api.find_donate(uuid)
            except:
                result = False
            if result is True and comment == uuid or result is True and comment == f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Fame;\n{uuid}':
                if status == 'success':
                    return autodonate_give_privillege(uuid, amount, steam)
                else:
                    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ | –ï—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ')
                    return redirect(request.referrer, code = 302)
            else:
                logger.info('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç—ë–∂ —Å —Ç–∞–∫–∏–º UUID')
                return redirect(request.referrer, code = 302)
        else:
            logger.info('–ü–æ–ª–µ UUID –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π')
            return redirect(request.referrer, code = 302)
    else:
        html_response = '<html><body><h2>–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!</h2></body></html>'
        return html_response


# CrystalPay
@app.route('/autodonate/crystalpay', methods = ['GET'])
def autodonate_crystalpay():
    price = request.args.get('price', default = 500, type = int)
    html_response = render_template('autodonate.html', name = 'CrystalPAY', price = price)
    return html_response

@app.route('/autodonate/crystalpay/post', methods = ['POST'])
def autodonate_crystalpay_post():
    if request.method == 'POST':
        price = request.args.get('price', default = 500, type = int)
        form_result = request.form
        steam = form_result.getlist('steam')
        result = 0
        pay_url = 0
        comment = uuid4()
        if price > 25:
            result, pay_url, pay_id = crystalpay_create_payment(f'{comment}', price)
            if result is True:
                return redirect(f"/autodonate/crystalpay/check?uuid={comment}&steam={steam[0]}&pay_url={pay_url}&pid={pay_id}", code = 302)
            else:
                html_response = render_template('request.html', request_color = 'red', request_text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã :(')
                return html_response
        else:
            html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç 25 —Ä—É–±–ª–µ–π!')
            return html_response
    else:
        html_response = render_template('request.html', request_color = 'red', request_text = '–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!')
        return html_response

@app.route('/autodonate/crystalpay/check', methods = ['GET'])
def autodonate_crystalpay_check():
    uuid = request.args.get('uuid')
    steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
    pay_url = request.args.get('pay_url')
    pay_id = request.args.get('pid')
    html_response = render_template('autodonate_post_success.html', name = 'CrystalPAY', pay_url = pay_url, comment = uuid, steam = steam, pid = pay_id)
    return html_response

@app.route('/autodonate/crystalpay/check_payment', methods = ['POST'])
def autodonate_crystalpay_check_payment():
    if request.method == 'POST':
        uuid = request.args.get('uuid')
        steam = request.args.get('steam', default = '–ù–µ –≤–≤–µ–¥—ë–Ω', type = str)
        pid = request.args.get('pid')
        if all((uuid, pid)) is not None and all((uuid, pid)) != '':
            try:
                result, status, comment, amount = crystalpay_check_payment(uuid, pid)
            except:
                result = False
            if result is True and comment == uuid:
                if status == 'payed':
                    return autodonate_give_privillege(uuid, amount, steam)
                else:
                    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ | –ï—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ')
                    return redirect(request.referrer, code = 302)
            else:
                logger.info('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç—ë–∂ —Å —Ç–∞–∫–∏–º UUID')
                return redirect(request.referrer, code = 302)
        else:
            logger.info('–ü–æ–ª–µ UUID –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π')
            return redirect(request.referrer, code = 302)
    else:
        html_response = '<html><body><h2>–ñ—É–ª–∏–∫, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!</h2></body></html>'
        return html_response



if __name__ == '__main__':
    from gevent.pywsgi import WSGIServer
    get_env()
    logger.debug(f'Server starting on port {os.environ.get("PORT")}')
    # app.run(host='127.0.0.1', port = os.environ.get("PORT"))
    http_server = WSGIServer(('127.0.0.1', int(os.environ.get("PORT"))), app)
    http_server.serve_forever()